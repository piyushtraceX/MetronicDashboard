import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import {
  AlertTriangle,
  ArrowDownUp,
  CheckCircle,
  ChevronDown,
  Clock,
  Download,
  Edit,
  Eye,
  FileText,
  Filter,
  HelpCircle,
  List,
  MoreHorizontal,
  Plus,
  RefreshCw,
  Search,
  Settings,
  Upload,
  X,
  CalendarIcon,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/use-auth";
import DeclarationWizard from "@/components/declarations/declaration-wizard";
import OutboundDeclarationWizard from "@/components/declarations/outbound-declaration-wizard";
import DeclarationDetailView from "@/components/declarations/declaration-detail-view";
import EUTracesForm from "@/components/declarations/eu-traces-form";
import ValidationDetailsDialog from "@/components/declarations/validation-details-dialog";

// Risk summary card component
interface RiskSummaryCardProps {
  color: string;
  label: string;
  count: number;
  icon: React.ReactNode;
}

function RiskSummaryCard({ color, label, count, icon }: RiskSummaryCardProps) {
  return (
    <div className="bg-white rounded-lg overflow-hidden shadow-sm border">
      <div className="p-5">
        <div className={`w-12 h-12 rounded-full ${color} flex items-center justify-center mb-4`}>
          {icon}
        </div>
        <h3 className="text-sm font-medium text-gray-500">{label}</h3>
        <div className="mt-1 flex items-baseline">
          <p className="text-3xl font-semibold text-gray-900">{count}</p>
        </div>
      </div>
    </div>
  );
}

// Declaration row component
interface DeclarationRowProps {
  declaration: Declaration;
  selected?: boolean;
  onSelectChange?: (id: number, selected: boolean) => void;
  onViewClick?: (id: number) => void;
  onEditClick?: (id: number) => void;
}

function DeclarationRow({ declaration, selected, onSelectChange, onViewClick, onEditClick }: DeclarationRowProps) {
  return (
    <tr className="border-b border-gray-200 hover:bg-gray-50">
      <td className="py-4 pl-4 pr-3 text-sm whitespace-nowrap">
        <Checkbox 
          checked={selected}
          onCheckedChange={(checked) => {
            if (onSelectChange) {
              onSelectChange(declaration.id, !!checked);
            }
          }}
          aria-label={`Select declaration ${declaration.id}`}
        />
      </td>
      <td className="py-4 px-3 text-sm whitespace-nowrap">
        <div className="font-medium text-gray-900">
          {`EUDR-${1000 + declaration.id}`}
        </div>
      </td>
      <td className="px-3 py-4 text-sm text-gray-500 whitespace-nowrap">
        {formatDate(declaration.createdAt)}
      </td>
      <td className="px-3 py-4 text-sm text-gray-500 whitespace-nowrap">
        {declaration.type === "inbound" ? 
          declaration.partnerName || `Supplier ${declaration.supplierId}` : 
          declaration.partnerName || `Customer ${declaration.customerId}`
        }
      </td>
      <td className="px-3 py-4 text-sm text-gray-500 whitespace-nowrap">
        {declaration.productName || "Unnamed Product"}
      </td>
      <td className="px-3 py-4 text-sm text-gray-500 whitespace-nowrap">
        {getStatusBadge(declaration.status)}
      </td>
      <td className="px-3 py-4 text-sm text-gray-500 whitespace-nowrap">
        {declaration.rmId || "Not Assigned"}
      </td>
      <td className="px-3 py-4 text-sm text-gray-500 whitespace-nowrap">
        {formatDate(declaration.updatedAt || declaration.createdAt)}
      </td>
      <td className="px-3 py-4 text-sm text-right whitespace-nowrap">
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon">
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => {
              if (onViewClick) {
                onViewClick(declaration.id);
              }
            }}>
              <Eye className="h-4 w-4 mr-2" />
              View details
            </DropdownMenuItem>
            <DropdownMenuItem onClick={() => {
              if (onEditClick) {
                onEditClick(declaration.id);
              }
            }}>
              <Edit className="h-4 w-4 mr-2" />
              Edit
            </DropdownMenuItem>
            <DropdownMenuItem>
              <Download className="h-4 w-4 mr-2" />
              Download PDF
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </td>
    </tr>
  );
}

// Formats a date string to a readable format
function formatDate(dateString: string) {
  if (!dateString) return "N/A";
  return new Date(dateString).toLocaleDateString();
}

// Gets the appropriate status badge for a declaration status
function getStatusBadge(status: string) {
  switch (status) {
    case "approved":
      return (
        <Badge className="bg-green-100 text-green-800 hover:bg-green-100">
          Approved
        </Badge>
      );
    case "pending":
      return (
        <Badge className="bg-yellow-100 text-yellow-800 hover:bg-yellow-100">
          Pending
        </Badge>
      );
    case "review":
      return (
        <Badge className="bg-orange-100 text-orange-800 hover:bg-orange-100">
          Review
        </Badge>
      );
    case "rejected":
      return (
        <Badge className="bg-red-100 text-red-800 hover:bg-red-100">
          Rejected
        </Badge>
      );
    default:
      return (
        <Badge className="bg-gray-100 text-gray-800 hover:bg-gray-100">
          {status || "Unknown"}
        </Badge>
      );
  }
}

// Types for form and API data
interface NewDeclarationForm {
  type: "inbound" | "outbound";
  productName: string;
  productDescription: string;
  hsnCode: string;
  quantity: string;
  unit: string;
  supplierId: number;
  startDate?: Date;
  endDate?: Date;
}

interface Declaration {
  id: number;
  type: "inbound" | "outbound";
  supplierId?: number;
  customerId?: number;
  partnerName?: string;
  partnerType?: "supplier" | "customer";
  productName: string;
  productDescription?: string;
  hsnCode?: string;
  quantity?: number;
  unit?: string;
  status: string;
  createdAt: string;
  updatedAt?: string;
  validFrom?: string;
  validUntil?: string;
  originCountry?: string;
  destinationCountry?: string;
  hasGeoJSON?: boolean;
  geojsonData?: any;
  satelliteImageUrl?: string;
  eudrReference?: string;
  verificationId?: string;
  previousReference?: string;
  filedBy?: string;
  hasAuditTrail?: boolean;
  reviewDate?: string;
  rmId?: string;
  importId?: string;
  material?: string;
}

interface DeclarationStats {
  total: number;
  inbound: number;
  outbound: number;
  approved: number;
  pending: number;
  review: number;
  rejected: number;
}

// The main Declarations component
export default function Declarations() {
  const { user } = useAuth();
  const isSupplier = user?.role === 'supplier';
  const isCustomer = user?.role === 'customer';
  const isEuOperator = user?.role === 'eu_operator';
  
  // For suppliers, default to outbound tab, for customers default to inbound tab
  const [activeTab, setActiveTab] = useState<string>(
    isSupplier ? "outbound" : "inbound"
  );
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);
  
  // EU Traces form state
  const [euTracesFormOpen, setEuTracesFormOpen] = useState(false);
  const [selectedTracesDeclarationId, setSelectedTracesDeclarationId] = useState<number | null>(null);
  const [simpleModalOpen, setSimpleModalOpen] = useState(false);
  const [wizardModalOpen, setWizardModalOpen] = useState(false);
  // For suppliers, always set declarationType to outbound, for customers to inbound
  const [declarationType, setDeclarationType] = useState<"inbound" | "outbound">(
    isSupplier ? "outbound" : isCustomer ? "inbound" : "inbound"
  );
  const [detailViewOpen, setDetailViewOpen] = useState(false);
  const [selectedDeclarationId, setSelectedDeclarationId] = useState<number | null>(null);
  const { toast } = useToast();
  
  // New declaration form state
  const [form, setForm] = useState<NewDeclarationForm>({
    type: "inbound",
    productName: "",
    productDescription: "",
    hsnCode: "",
    quantity: "",
    unit: "kg",
    supplierId: 1,
    startDate: undefined,
    endDate: undefined,
  });
  
  // GeoJSON validation details state
  const [validationDetailsOpen, setValidationDetailsOpen] = useState(false);
  const [validationType, setValidationType] = useState<"geometry" | "satellite">("geometry");
  
  // Bulk operations state
  const [statusFilter, setStatusFilter] = useState<string>("all");
  const [selectedRows, setSelectedRows] = useState<number[]>([]);
  const [allSelected, setAllSelected] = useState(false);
  const [showRmIdModal, setShowRmIdModal] = useState(false);
  const [rmIdInput, setRmIdInput] = useState("");
  const [allotRmIdModalOpen, setAllotRmIdModalOpen] = useState(false);
  const [selectedWithoutRmId, setSelectedWithoutRmId] = useState<Declaration[]>([]);
  const [fileUploading, setFileUploading] = useState(false);
  
  // RM ID bulk update state
  const handleRowSelect = (id: number, selected: boolean) => {
    if (selected) {
      setSelectedRows(prev => [...prev, id]);
    } else {
      setSelectedRows(prev => prev.filter(rowId => rowId !== id));
    }
  };
  
  const handleSelectAll = (selected: boolean) => {
    setAllSelected(selected);
    if (selected) {
      setSelectedRows(filteredDeclarations.map(d => d.id));
    } else {
      setSelectedRows([]);
    }
  };
  
  // Create new declaration mutation
  const createDeclaration = useMutation({
    mutationFn: async (data: NewDeclarationForm) => {
      return apiRequest("POST", "/api/declarations", data);
    },
    onSuccess: () => {
      setSimpleModalOpen(false);
      queryClient.invalidateQueries({ queryKey: ['/api/declarations'] });
      queryClient.invalidateQueries({ queryKey: ['/api/declarations/stats'] });
      toast({
        title: "Declaration created",
        description: "Your declaration has been successfully created.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Error creating declaration",
        description: error.message || "Something went wrong. Please try again.",
        variant: "destructive",
      });
    }
  });
  
  // Handle simple form submission
  const handleSimpleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    createDeclaration.mutate(form);
  };
  
  // Fetching declarations
  const { data: declarations = [], isLoading: isLoadingDeclarations } = useQuery<Declaration[]>({
    queryKey: ['/api/declarations', activeTab],
    queryFn: async () => {
      // Pass type as a query parameter
      console.log(`Fetching declarations with type: ${activeTab}`);
      return apiRequest(`/api/declarations?type=${activeTab}`);
    },
    refetchOnWindowFocus: false,
  });
  
  // Fetch stats
  const { data: stats, isLoading: isLoadingStats } = useQuery<DeclarationStats>({
    queryKey: ['/api/declarations/stats'],
    refetchOnWindowFocus: false,
  });
  
  // Fetch suppliers (simplified for this example)
  const { data: suppliers = [] } = useQuery<any[]>({
    queryKey: ['/api/suppliers'],
    refetchOnWindowFocus: false,
  });
  
  // Since we're already filtering by type on the server, we don't need to filter by type again
  let filteredDeclarations = [...declarations];
          
  // Apply status filter
  if (statusFilter !== "all") {
    if (statusFilter === "rm_id_not_present") {
      // Filter declarations without RM IDs
      filteredDeclarations = filteredDeclarations.filter((d) => !d.rmId);
    } else {
      // Filter by regular status
      filteredDeclarations = filteredDeclarations.filter((d) => d.status === statusFilter);
    }
  }
  
  // Apply date filter
  if (selectedDate) {
    filteredDeclarations = filteredDeclarations.filter((d) => {
      const declarationDate = new Date(d.createdAt);
      return (
        declarationDate.getFullYear() === selectedDate.getFullYear() &&
        declarationDate.getMonth() === selectedDate.getMonth() &&
        declarationDate.getDate() === selectedDate.getDate()
      );
    });
  }
  
  // Function to handle RM ID assignment
  const updateRmIds = useMutation({
    mutationFn: async ({ ids, rmId }: { ids: number[], rmId: string }) => {
      return apiRequest("PATCH", "/api/declarations/rmid", { ids, rmId });
    },
    onSuccess: () => {
      setShowRmIdModal(false);
      setRmIdInput("");
      setSelectedRows([]);
      queryClient.invalidateQueries({ queryKey: ['/api/declarations'] });
      toast({
        title: "RM IDs updated",
        description: `RM ID has been updated for ${selectedRows.length} declaration(s).`,
      });
    },
    onError: (error: any) => {
      toast({
        title: "Error updating RM IDs",
        description: error.message || "Something went wrong. Please try again.",
        variant: "destructive",
      });
    }
  });
  
  const handleCreateRole = () => {
    // Implement role creation logic
  };
  
  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Declarations</h1>
          <p className="mt-1 text-sm text-gray-500">Manage inbound and outbound declarations for EUDR compliance</p>
        </div>
        <div className="mt-4 md:mt-0 flex space-x-2">
          {/* Only show Inbound Declaration button for non-supplier users */}
          {(!isSupplier || isCustomer) && (
            <Button 
              className="bg-green-600 hover:bg-green-700" 
              onClick={() => {
                setDeclarationType("inbound");
                setWizardModalOpen(true);
              }}
            >
              <Plus className="h-4 w-4 mr-2" />
              Inbound Declaration
            </Button>
          )}
          {/* Only show Outbound Declaration button for non-customer users */}
          {!isCustomer && (
            <Button 
              className="bg-blue-600 hover:bg-blue-700"
              onClick={() => {
                setDeclarationType("outbound");
                setWizardModalOpen(true);
              }}
            >
              <Plus className="h-4 w-4 mr-2" />
              Outbound Declaration
            </Button>
          )}
        </div>
      </div>
      
      {/* Advanced Declaration Wizard */}
      {declarationType === "inbound" ? (
        <DeclarationWizard 
          open={wizardModalOpen}
          onOpenChange={setWizardModalOpen}
          onComplete={() => {
            setWizardModalOpen(false);
            queryClient.invalidateQueries({ queryKey: ['/api/declarations'] });
            queryClient.invalidateQueries({ queryKey: ['/api/declarations/stats'] });
          }}
        />
      ) : (
        <OutboundDeclarationWizard 
          open={wizardModalOpen}
          onOpenChange={setWizardModalOpen}
          onComplete={() => {
            setWizardModalOpen(false);
            queryClient.invalidateQueries({ queryKey: ['/api/declarations'] });
            queryClient.invalidateQueries({ queryKey: ['/api/declarations/stats'] });
          }}
        />
      )}
      
      {/* Details View */}
      <DeclarationDetailView 
        open={detailViewOpen}
        onOpenChange={setDetailViewOpen}
        declarationId={selectedDeclarationId}
        onValidationDetailsClick={(type) => {
          setValidationType(type);
          setValidationDetailsOpen(true);
        }}
        onFileInEuTraces={(declarationId) => {
          setSelectedTracesDeclarationId(declarationId);
          setEuTracesFormOpen(true);
          setDetailViewOpen(false);
        }}
      />
      
      {/* GeoJSON Validation Details Dialog */}
      <ValidationDetailsDialog 
        open={validationDetailsOpen}
        onOpenChange={setValidationDetailsOpen}
        type={validationType}
      />
      
      {/* Simple Create Form */}
      <Dialog open={simpleModalOpen} onOpenChange={setSimpleModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Create New Declaration</DialogTitle>
            <DialogDescription>
              Fill out basic information to create a new declaration
            </DialogDescription>
          </DialogHeader>
          
          <form onSubmit={handleSimpleSubmit}>
            <div className="grid gap-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="type">Declaration Type</Label>
                  <Select
                    value={form.type}
                    onValueChange={(value) => setForm({ ...form, type: value as "inbound" | "outbound" })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="inbound">Inbound</SelectItem>
                      <SelectItem value="outbound">Outbound</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="supplier">Supplier</Label>
                  <Select
                    value={form.supplierId.toString()}
                    onValueChange={(value) => setForm({ ...form, supplierId: parseInt(value) })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select supplier" />
                    </SelectTrigger>
                    <SelectContent>
                      {suppliers.map((supplier: any) => (
                        <SelectItem key={supplier.id} value={supplier.id.toString()}>
                          {supplier.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="productName">Product Name</Label>
                <Input
                  id="productName"
                  value={form.productName}
                  onChange={(e) => setForm({ ...form, productName: e.target.value })}
                  placeholder="Enter product name"
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="productDescription">Product Description</Label>
                <Input
                  id="productDescription"
                  value={form.productDescription}
                  onChange={(e) => setForm({ ...form, productDescription: e.target.value })}
                  placeholder="Enter product description"
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="hsnCode">HS Code</Label>
                  <Input
                    id="hsnCode"
                    value={form.hsnCode}
                    onChange={(e) => setForm({ ...form, hsnCode: e.target.value })}
                    placeholder="Enter HS code"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="quantity">Quantity</Label>
                  <div className="flex gap-2">
                    <Input
                      id="quantity"
                      type="number"
                      value={form.quantity}
                      onChange={(e) => setForm({ ...form, quantity: e.target.value })}
                      placeholder="Enter quantity"
                    />
                    <Select
                      value={form.unit}
                      onValueChange={(value) => setForm({ ...form, unit: value })}
                    >
                      <SelectTrigger className="w-24">
                        <SelectValue placeholder="Unit" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="kg">kg</SelectItem>
                        <SelectItem value="tons">tons</SelectItem>
                        <SelectItem value="lbs">lbs</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </div>
            </div>
            
            <DialogFooter className="mt-6">
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => setSimpleModalOpen(false)}
              >
                Cancel
              </Button>
              <Button 
                type="submit"
                disabled={createDeclaration.isPending}
                className="bg-primary"
              >
                {createDeclaration.isPending ? "Submitting..." : "Submit Declaration"}
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
      
      <Tabs 
        defaultValue={isSupplier ? "outbound" : "inbound"} 
        className="w-full" 
        onValueChange={setActiveTab}
      >
        {isSupplier ? (
          <TabsList className="grid w-full grid-cols-1 mb-4">
            <TabsTrigger value="outbound">Outbound Declaration</TabsTrigger>
          </TabsList>
        ) : isCustomer ? (
          <TabsList className="grid w-full grid-cols-1 mb-4">
            <TabsTrigger value="inbound">Inbound Declaration</TabsTrigger>
          </TabsList>
        ) : isEuOperator ? (
          <TabsList className="grid w-full grid-cols-2 mb-4">
            <TabsTrigger value="inbound">Inbound Declaration</TabsTrigger>
            <TabsTrigger value="outbound">Outbound Declaration</TabsTrigger>
          </TabsList>
        ) : (
          <TabsList className="grid w-full grid-cols-2 mb-4">
            <TabsTrigger value="inbound">Inbound Declaration</TabsTrigger>
            <TabsTrigger value="outbound">Outbound Declaration</TabsTrigger>
          </TabsList>
        )}
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <RiskSummaryCard 
            color="bg-green-100 text-green-600" 
            label="Low Risk" 
            count={stats?.approved || 0} 
            icon={<svg viewBox="0 0 24 24" width="24" height="24" className="fill-current"><path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>}
          />
          <RiskSummaryCard 
            color="bg-yellow-100 text-yellow-600" 
            label="Medium Risk" 
            count={stats?.review || 0} 
            icon={<svg viewBox="0 0 24 24" width="24" height="24" className="fill-current"><path d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" /></svg>}
          />
          <RiskSummaryCard 
            color="bg-red-100 text-red-600" 
            label="High Risk" 
            count={stats?.rejected || 0} 
            icon={<svg viewBox="0 0 24 24" width="24" height="24" className="fill-current"><path d="M12 2c5.522 0 10 4.478 10 10s-4.478 10-10 10S2 17.522 2 12 6.478 2 12 2zm0 15a1 1 0 100-2 1 1 0 000 2zm1-5a1 1 0 10-2 0v-4a1 1 0 112 0v4z" /></svg>}
          />
        </div>
        
        <div className="flex flex-col md:flex-row gap-4 mb-6">
          <div className="w-full md:w-1/4">
            <Select defaultValue="all" value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger>
                <SelectValue placeholder="All Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="approved">Approved</SelectItem>
                <SelectItem value="pending">Pending</SelectItem>
                <SelectItem value="review">Review</SelectItem>
                <SelectItem value="rejected">Rejected</SelectItem>
                <SelectItem value="rm_id_not_present">RM id not present</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <div className="w-full md:w-1/3">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={16} />
              <Input 
                placeholder={activeTab === "inbound" ? "Search suppliers..." : "Search customers..."} 
                className="pl-9" 
              />
            </div>
          </div>
          
          <div className="w-full md:w-1/3">
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  className={cn(
                    "w-full justify-start text-left font-normal",
                    !selectedDate && "text-muted-foreground"
                  )}
                >
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {selectedDate ? format(selectedDate, "PPP") : "Select date range"}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Calendar
                  mode="single"
                  selected={selectedDate}
                  onSelect={setSelectedDate}
                  initialFocus
                />
              </PopoverContent>
            </Popover>
          </div>
        </div>
        
        {/* Bulk Actions Panel */}
        {selectedRows.length > 0 && (
          <div className="mb-4 p-3 bg-muted rounded-lg flex items-center justify-between">
            <div className="flex items-center gap-2">
              <span className="text-sm font-medium">{selectedRows.length} {selectedRows.length === 1 ? 'item' : 'items'} selected</span>
            </div>
            <div className="flex gap-2">
              <Button size="sm" variant="outline" onClick={() => setSelectedRows([])}>
                Clear selection
              </Button>
            </div>
          </div>
        )}
        
        <div className="rounded-md border">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900">
                    <Checkbox 
                      checked={allSelected}
                      onCheckedChange={handleSelectAll}
                      aria-label="Select all"
                    />
                  </th>
                  <th scope="col" className="py-3.5 px-3 text-left text-sm font-semibold text-gray-900">
                    Dec. ID
                  </th>
                  <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                    Filing Date
                  </th>
                  <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                    {activeTab === "inbound" ? "Supplier" : "Customer"}
                  </th>
                  <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                    Product
                  </th>
                  <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                    Status
                  </th>
                  <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                    RM ID
                  </th>
                  <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                    Last Update
                  </th>
                  <th scope="col" className="px-3 py-3.5 text-right text-sm font-semibold text-gray-900">
                    Action
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 bg-white">
                {isLoadingDeclarations ? (
                  <tr>
                    <td colSpan={9} className="py-10 text-center text-gray-500">
                      Loading declarations...
                    </td>
                  </tr>
                ) : filteredDeclarations.length === 0 ? (
                  <tr>
                    <td colSpan={9} className="py-10 text-center text-gray-500">
                      No {activeTab === "inbound" ? "inbound" : "outbound"} declarations found
                    </td>
                  </tr>
                ) : (
                  filteredDeclarations.map((declaration: Declaration) => (
                    <DeclarationRow 
                      key={declaration.id} 
                      declaration={declaration} 
                      selected={selectedRows.includes(declaration.id)}
                      onSelectChange={handleRowSelect}
                      onViewClick={(id) => {
                        setSelectedDeclarationId(id);
                        setDetailViewOpen(true);
                      }}
                    />
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>
      </Tabs>
      
      {/* RM ID Assignment Modal */}
      <Dialog open={showRmIdModal} onOpenChange={setShowRmIdModal}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Assign RM ID</DialogTitle>
            <DialogDescription>
              Assign an RM ID to {selectedRows.length} selected declaration(s).
            </DialogDescription>
          </DialogHeader>
          
          <div className="py-4">
            <Label htmlFor="rmid">RM ID</Label>
            <Input 
              id="rmid" 
              className="mt-2" 
              placeholder="Enter RM ID" 
              value={rmIdInput}
              onChange={(e) => setRmIdInput(e.target.value)}
            />
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowRmIdModal(false)}>
              Cancel
            </Button>
            <Button 
              onClick={() => updateRmIds.mutate({ ids: selectedRows, rmId: rmIdInput })}
              disabled={updateRmIds.isPending || !rmIdInput.trim()}
            >
              {updateRmIds.isPending ? (
                <div className="flex items-center gap-2">
                  <RefreshCw size={16} className="animate-spin" />
                  Assigning...
                </div>
              ) : (
                "Assign RM ID"
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* Bulk Upload RM ID Modal */}
      <Dialog open={allotRmIdModalOpen} onOpenChange={setAllotRmIdModalOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Allot RM ID</DialogTitle>
            <DialogDescription>
              Upload a spreadsheet to allot RM IDs to multiple declarations at once.
            </DialogDescription>
          </DialogHeader>
          
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center mt-4">
            <div className="flex flex-col items-center justify-center">
              <Upload className="h-10 w-10 text-gray-400 mb-2" />
              <h3 className="text-sm font-medium text-gray-900">Drag and drop</h3>
              <p className="text-xs text-gray-500 mb-4">or click to upload file</p>
              <label className="bg-primary text-primary-foreground hover:bg-primary/90 inline-flex h-9 items-center justify-center rounded-md px-4 py-2 text-sm font-medium cursor-pointer">
                <input type="file" className="hidden" />
                Browse files
              </label>
            </div>
          </div>
          
          <div className="flex items-center mt-6 mb-2">
            <div className="flex-grow border-t border-gray-200"></div>
            <span className="flex-shrink mx-4 text-sm text-gray-500">Or</span>
            <div className="flex-grow border-t border-gray-200"></div>
          </div>
          
          <div className="flex items-center justify-between">
            <div className="flex flex-col">
              <div className="text-sm font-medium mb-1 cursor-pointer text-blue-500 flex items-center hover:underline" onClick={() => {
              // Simulate API call to download template
              fetch('attached_assets/Product List.xlsx')
              .then(response => response.blob())
              .then(blob => {
                // Create a URL for the blob
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'Product List.xlsx';
                document.body.appendChild(a);
                a.click();
                
                // Clean up
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                
                toast({
                  title: "Product List Downloaded",
                  description: `Downloaded template with ${selectedWithoutRmId.length} products`,
                });
              })
              .catch(error => {
                console.error('Error downloading file:', error);
                toast({
                  title: "Download Failed",
                  description: "There was an error downloading the product list template",
                  variant: "destructive",
                });
              });
            }}>
              <svg className="h-5 w-5 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                <polyline points="7 10 12 15 17 10"></polyline>
                <line x1="12" y1="15" x2="12" y2="3"></line>
              </svg>
              Download Product List
            </div>
            <p className="ml-1 text-gray-500 text-xs">
              Get Excel template with selected products
            </p>
          </div>
          
          <div className="text-sm flex items-center text-blue-500">
            <svg className="h-4 w-4 mr-1 text-blue-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
              <circle cx="12" cy="12" r="10"></circle>
              <line x1="12" y1="8" x2="12" y2="12"></line>
              <line x1="12" y1="16" x2="12.01" y2="16"></line>
            </svg>
            Maximum file size: 10MB
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setAllotRmIdModalOpen(false)}>
              Cancel
            </Button>
            <Button type="submit" disabled={fileUploading}>
              {fileUploading ? (
                <span className="flex items-center">
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Uploading...
                </span>
              ) : (
                "Upload File"
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* EU Traces Form */}
      <EUTracesForm 
        open={euTracesFormOpen} 
        onOpenChange={setEuTracesFormOpen}
        declarationId={selectedTracesDeclarationId || undefined}
      />
    </div>
  );
}